{"version":3,"file":"extract-domain.modern.js","sources":["../index.ts"],"sourcesContent":["function throwTypeError(): never {\n    throw new TypeError('The given URL is not a string. Please verify your string|array.');\n}\n\nconst endings = ['/', ':', '?', '#'];\nconst starters = ['.', '/', '@'];\n\ntype Url = string;\ntype Urls = string | Array<string>;\ntype ReturnUrls = Array<Url> | Array<Promise<Url>>;\ntype ReturnUrl = Url | Promise<Url>;\n\n/**\n * Options to extract domain.\n */\ntype GetDomainOptions = {\n    tld?: boolean;\n};\n\n/**\n * @param {Url} url\n * @param {GetDomainOptions} opts `{ tld: true }` permit to get Top Level Domain like `*.co.uk`\n * @returns {ReturnUrl} Returns a URL or a promise of a URL if the PSL lib is being used\n */\nfunction getDomainFromUrl(url: Url, opts: GetDomainOptions): ReturnUrl {\n    let domainInc: number = 0;\n    let offsetDomain: number = 0;\n    let offsetStartSlice: number = 0;\n    let offsetPath: number = 0;\n    let len: number = url.length;\n    let i: number = 0;\n\n    // Find end offset of domain\n    while (len-- && ++i) {\n        if (domainInc && endings.indexOf(url[i]) > -1) {\n            break;\n        }\n\n        if (url[i] !== '.') {\n            continue;\n        }\n\n        ++domainInc;\n\n        offsetDomain = i;\n    }\n\n    offsetPath = i;\n\n    i = offsetDomain;\n\n    // Find offset before domain name.\n    while (i--) {\n        // Look for sub domain, protocol or basic auth\n        if (starters.indexOf(url[i]) === -1) {\n            continue;\n        }\n\n        offsetStartSlice = i + 1;\n\n        break;\n    }\n\n    if (offsetStartSlice === 0 && offsetPath > 3) {\n        return url;\n    }\n\n    if (offsetStartSlice > 0 && offsetStartSlice < 2) {\n        return '';\n    }\n\n    // Very customized if statement for tlds\n    if (opts.tld) {\n        let offsetStart: number = 0;\n        const starters: Array<string> = ['/', '@'];\n        let i: number = offsetDomain;\n\n        while (i--) {\n            if (starters.indexOf(url[i]) > -1) {\n                offsetStart = i + 1;\n\n                break;\n            }\n        }\n\n        return import('psl')\n            .then((psl) => Promise.resolve(psl.get(url.slice(offsetStart, offsetPath))))\n            .catch((error) => {\n                console.error(error);\n\n                throw Error(\n                    'You must install psl library (https://www.npmjs.com/package/psl) to use `tld` option'\n                );\n            });\n    }\n\n    // Tried several approaches slicing a string. Can't get it any faster than this.\n    return url.slice(offsetStartSlice, offsetPath);\n}\n\n/**\n * @param {Urls} urls [\"https://www.google.com\", \"https://www.github.com\"] or \"https://www.google.com\"\n * @param {GetDomainOptions} opts `{ tld: true }` permit to get Top Level Domain like `*.co.uk`\n * @returns {Urls | Promise<Urls>} Return URLs or a promise of URLs if the PSL lib is being used\n */\nexport default function extractDomain(\n    urls: Urls,\n    opts: GetDomainOptions = {}\n): ReturnUrls | ReturnUrl {\n    if (typeof urls === 'string') {\n        return getDomainFromUrl(urls, opts);\n    } else if (Array.isArray(urls)) {\n        // lazy type checking (^o^)\n        const extractedUrls: any = [];\n        const len: number = urls.length;\n        let i: number = 0;\n\n        for (; i < len; i++) {\n            const url = getDomainFromUrl(urls[i], opts);\n\n            extractedUrls.push(url);\n        }\n\n        return extractedUrls;\n    } else {\n        throwTypeError();\n    }\n}\n"],"names":["endings","getDomainFromUrl","url","opts","domainInc","offsetStartSlice","offsetPath","length","i","len","indexOf","offsetDomain","starters","tld","offsetStart","_i","import","then","psl","Promise","resolve","get","slice","catch","error","console","extractDomain","urls","Array","isArray","extractedUrls","push","TypeError","throwTypeError"],"mappings":"AAIA,MAAMA,EAAU,CAAC,IAAK,IAAK,IAAK,OACf,CAAC,IAAK,IAAK,KAmB5B,SAASC,EAAiBC,EAAUC,GAChC,IAAaC,EAAW,IACG,EACvBC,EAA2B,EACjBC,EAAW,IACPJ,EAAIK,OACjBC,EAAW,EAGhB,KAAOC,OAAWD,KACVJ,GAAaJ,EAAQU,QAAQR,EAAIM,KAAO,IAI7B,MAAXN,EAAIM,OAINJ,EAEFO,EAAeH,GAQnB,IALAF,EAAaE,EAEbA,EAAIG,EAGGH,KAEH,IAAkC,IAA9BI,EAASF,QAAQR,EAAIM,IAAzB,CAIAH,EAAmBG,EAAI,EAEvB,KAJC,CAOL,GAAyB,IAArBH,GAA0BC,EAAa,EACvC,SAGJ,GAAID,EAAmB,GAAKA,EAAmB,EAC3C,MAAO,GAIX,GAAIF,EAAKU,IAAK,CACV,IAAeC,EAAW,EAC1B,MAAcF,EAAkB,CAAC,IAAK,KACtC,IAAKG,EAAWJ,EAEhB,KAAOH,KACH,GAAII,EAASF,QAAQR,EAAIM,KAAO,EAAG,CAC/BM,EAAcN,EAAI,EAElB,KACH,CAGL,OAAcQ,OAAA,OACTC,KAAMC,GAAQC,QAAQC,QAAQF,EAAIG,IAAInB,EAAIoB,MAAMR,EAAaR,MAC7DiB,MAAOC,IAGJ,MAFAC,QAAQD,MAAMA,SAGV,uFADO,EAItB,CAGD,OAAOtB,EAAIoB,MAAMjB,EAAkBC,EACtC,UAOuBoB,EACpBC,EACAxB,EAAyB,CAAA,GAEzB,GAAoB,mBAChB,SAAwBwB,EAAMxB,GAC3B,GAAIyB,MAAMC,QAAQF,GAAO,CAE5B,QAA2B,GACrBlB,EAAckB,EAAKpB,OACzB,MAAgB,EAEhB,KAAOC,EAAIC,EAAKD,IAAK,CACjB,MAAMN,EAAMD,EAAiB0B,EAAKnB,GAAIL,GAEtC2B,EAAcC,KAAK7B,EACtB,CAED,OACH4B,CAAA,EA5HL,WACI,MAAUE,IAAAA,UAAU,kEACvB,CA2HOC,EAEP"}