{"version":3,"file":"extract-domain.modern.mjs","sources":["../index.js"],"sourcesContent":["function throwTypeError() {\n    throw new TypeError('The given URL is not a string. Please verify your string|array.');\n}\n\nconst endings = ['/', ':', '?', '#'];\nconst starters = ['.', '/', '@'];\n\n/**\n * Options to extract domain.\n * @typedef {({tld: boolean})} GetDomainOptions\n */\n\n/**\n * @param {string} url\n * @param {GetDomainOptions} opts\n *  - `tld` permit to get Top Level Domain like `*.co.uk`\n * @returns {string}\n */\nfunction getDomainFromUrl(url, opts) {\n    if (typeof url !== 'string') {\n        throwTypeError();\n    }\n\n    let domainInc = 0;\n    let offsetDomain = 0;\n    let offsetStartSlice = 0;\n    let offsetPath = 0;\n    let len = url.length;\n    let i = 0;\n\n    // Find end offset of domain\n    while (len-- && ++i) {\n        if (domainInc && endings.indexOf(url[i]) > -1) {\n            break;\n        }\n\n        if (url[i] !== '.') {\n            continue;\n        }\n\n        ++domainInc;\n\n        offsetDomain = i;\n    }\n\n    offsetPath = i;\n\n    i = offsetDomain;\n\n    // Find offset before domain name.\n    while (i--) {\n        // Look for sub domain, protocol or basic auth\n        if (starters.indexOf(url[i]) === -1) {\n            continue;\n        }\n\n        offsetStartSlice = i + 1;\n\n        break;\n    }\n\n    if (offsetStartSlice === 0 && offsetPath > 3) {\n        return url;\n    }\n\n    if (offsetStartSlice > 0 && offsetStartSlice < 2) {\n        return '';\n    }\n\n    // Very customized if statement for tlds\n    if (opts.tld) {\n        let offsetStart = 0;\n        const starters = ['/', '@'];\n        let i = offsetDomain;\n\n        while (i--) {\n            if (starters.indexOf(url[i]) > -1) {\n                offsetStart = i + 1;\n\n                break;\n            }\n        }\n\n        try {\n            const psl = require('psl');\n\n            return psl.get(url.slice(offsetStart, offsetPath));\n        } catch (_e) {\n            throw Error(\n                'You must install psl library (https://www.npmjs.com/package/psl) to use `tld` option'\n            );\n        }\n    }\n\n    // Tried several approaches slicing a string. Can't get it any faster than this.\n    return url.slice(offsetStartSlice, offsetPath);\n}\n\n/**\n * @param {string} url\n * @param {GetDomainOptions} opts\n *  - `tld` permit to get Top Level Domain like `*.co.uk`\n * @returns {string}\n */\nmodule.exports = function extractDomain(urls, opts = {}) {\n    if (typeof urls === 'string') {\n        return getDomainFromUrl(urls, opts);\n    } else if (Array.isArray(urls)) {\n        const extractedUrls = [];\n        const len = urls.length;\n        let i = 0;\n\n        for (; i < len; i++) {\n            extractedUrls.push(getDomainFromUrl(urls[i], opts));\n        }\n\n        return extractedUrls;\n    } else {\n        throwTypeError();\n    }\n};\n"],"names":["TypeError","endings","getDomainFromUrl","url","opts","throwTypeError","domainInc","offsetDomain","offsetPath","len","length","i","indexOf","starters","offsetStartSlice","tld","offsetStart","require","get","slice","_e","Error","module","exports","urls","Array","isArray","extractedUrls","push"],"mappings":"AAAA,aACI,MAAUA,IAAAA,UAAU,kEACvB,CAED,MAAMC,EAAU,CAAC,IAAK,IAAK,IAAK,OACf,CAAC,IAAK,IAAK,KAa5B,SAASC,EAAiBC,EAAKC,GACR,iBAARD,GACPE,IAGJ,IAAIC,EAAY,EACAC,EAAG,IACI,EACnBC,EAAa,EACVC,EAAGN,EAAIO,OACVC,EAAI,EAGR,KAAOF,OAAWE,KACVL,GAAaL,EAAQW,QAAQT,EAAIQ,KAAO,IAI7B,MAAXR,EAAIQ,OAINL,EAEFC,EAAeI,GAQnB,IALAH,EAAaG,EAEbA,EAAIJ,EAGGI,KAEH,IAAkC,IAA9BE,EAASD,QAAQT,EAAIQ,IAAzB,CAIAG,EAAmBH,EAAI,EAEvB,KAJC,CAOL,GAAyB,IAArBG,GAA0BN,EAAa,EACvC,OAAOL,EAGX,GAAIW,EAAmB,GAAKA,EAAmB,EAC3C,MAAO,GAIX,GAAIV,EAAKW,IAAK,CACV,IAAeC,EAAG,EAClB,QAAiB,CAAC,IAAK,KACvB,MAAQT,EAER,KAAOI,KACH,GAAIE,EAASD,QAAQT,EAAIQ,KAAO,EAAG,CAC/BK,EAAcL,EAAI,EAElB,KACH,CAGL,IAGI,OAFYM,QAAQ,OAETC,IAAIf,EAAIgB,MAAMH,EAAaR,GAKzC,CAJC,MAAOY,GACL,MAAMC,MACF,uFAEP,CACJ,CAGD,SAAWF,MAAML,EAAkBN,EACtC,CAQDc,OAAOC,QAAU,SAAuBC,EAAMpB,EAAO,IACjD,GAAoB,iBAAhBoB,EACA,OAAuBtB,EAACsB,EAAMpB,MACvBqB,MAAMC,QAAQF,GAAO,CAC5B,MAAmBG,EAAG,KACVH,EAAKd,OACjB,IAAKC,EAAG,EAER,KAAOA,EAAIF,EAAKE,IACZgB,EAAcC,KAAK1B,EAAiBsB,EAAKb,GAAIP,IAGjD,QACH,CACGC,GAEP"}