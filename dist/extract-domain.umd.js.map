{"version":3,"file":"extract-domain.umd.js","sources":["../index.js"],"sourcesContent":["function throwTypeError() {\n    throw new TypeError('The given URL is not a string. Please verify your string|array.');\n}\n\nconst endings = ['/', ':', '?', '#'];\nconst starters = ['.', '/', '@'];\n\n/**\n * Options to extract domain.\n * @typedef {({tld: boolean})} GetDomainOptions\n */\n\n/**\n * @param {string} url\n * @param {GetDomainOptions} opts\n *  - `tld` permit to get Top Level Domain like `*.co.uk`\n * @returns {string}\n */\nfunction getDomainFromUrl(url, opts) {\n    if (typeof url !== 'string') {\n        throwTypeError();\n    }\n\n    let domainInc = 0;\n    let offsetDomain = 0;\n    let offsetStartSlice = 0;\n    let offsetPath = 0;\n    let len = url.length;\n    let i = 0;\n\n    // Find end offset of domain\n    while (len-- && ++i) {\n        if (domainInc && endings.indexOf(url[i]) > -1) {\n            break;\n        }\n\n        if (url[i] !== '.') {\n            continue;\n        }\n\n        ++domainInc;\n\n        offsetDomain = i;\n    }\n\n    offsetPath = i;\n\n    i = offsetDomain;\n\n    // Find offset before domain name.\n    while (i--) {\n        // Look for sub domain, protocol or basic auth\n        if (starters.indexOf(url[i]) === -1) {\n            continue;\n        }\n\n        offsetStartSlice = i + 1;\n\n        break;\n    }\n\n    // offsetStartSlice should always be larger than protocol\n    if (offsetStartSlice < 2) {\n        return '';\n    }\n\n    // Very customized if statement for tlds\n    if (opts.tld) {\n        let offsetStart = 0;\n        const starters = ['/', '@'];\n\n        while (i--) {\n            if (starters.indexOf(url[i]) > -1) {\n                offsetStart = i + 1;\n\n                break;\n            }\n        }\n\n        try {\n            const psl = require('psl');\n\n            return psl.get(url.slice(offsetStart, offsetPath));\n        } catch (_e) {\n            throw Error(\n                'You must install psl library (https://www.npmjs.com/package/psl) to use `tld` option'\n            );\n        }\n    }\n\n    // Tried several approaches slicing a string. Can't get it any faster than this.\n    return url.slice(offsetStartSlice, offsetPath);\n}\n\n/**\n * @param {string} url\n * @param {GetDomainOptions} opts\n *  - `tld` permit to get Top Level Domain like `*.co.uk`\n * @returns {string}\n */\nmodule.exports = function extractDomain(urls, opts = {}) {\n    if (typeof urls === 'string') {\n        return getDomainFromUrl(urls, opts);\n    } else if (Array.isArray(urls)) {\n        const extractedUrls = [];\n        const len = urls.length;\n        let i = 0;\n\n        for (; i < len; i++) {\n            extractedUrls.push(getDomainFromUrl(urls[i], opts));\n        }\n\n        return extractedUrls;\n    } else {\n        throwTypeError();\n    }\n};\n"],"names":["throwTypeError","TypeError","endings","starters","getDomainFromUrl","url","opts","offsetPath","domainInc","offsetDomain","offsetStartSlice","len","length","i","indexOf","tld","offsetStart","require","get","slice","_e","Error","module","exports","urls","Array","isArray","extractedUrls","push"],"mappings":"6EAAA,SAASA,IACL,UAAUC,UAAU,mEAGxB,IAAMC,EAAU,CAAC,IAAK,IAAK,IAAK,KAC1BC,EAAW,CAAC,IAAK,IAAK,KAa5B,SAASC,EAAiBC,EAAKC,GACR,iBAARD,GACPL,IAWJ,IARA,IAGIO,EAHAC,EAAY,EACZC,EAAe,EACfC,EAAmB,EAEnBC,EAAMN,EAAIO,OACVC,EAAI,EAGDF,OAAWE,KACVL,GAAaN,EAAQY,QAAQT,EAAIQ,KAAO,IAI7B,MAAXR,EAAIQ,OAINL,EAEFC,EAAeI,GAQnB,IALAN,EAAaM,EAEbA,EAAIJ,EAGGI,KAEH,IAAkC,IAA9BV,EAASW,QAAQT,EAAIQ,IAAzB,CAIAH,EAAmBG,EAAI,EAEvB,MAIJ,GAAIH,EAAmB,EACnB,MAAO,GAIX,GAAIJ,EAAKS,IAAK,CAIV,IAHA,IAAIC,EAAc,EACZb,EAAW,CAAC,IAAK,KAEhBU,KACH,GAAIV,EAASW,QAAQT,EAAIQ,KAAO,EAAG,CAC/BG,EAAcH,EAAI,EAElB,MAIR,IAGI,OAFYI,QAAQ,OAETC,IAAIb,EAAIc,MAAMH,EAAaT,IACxC,MAAOa,GACL,MAAMC,MACF,yFAMZ,OAAOhB,EAAIc,MAAMT,EAAkBH,GASvCe,OAAOC,QAAU,SAAuBC,EAAMlB,GAC1C,YAD0CA,IAAAA,EAAO,IAC7B,iBAATkB,EACP,OAAOpB,EAAiBoB,EAAMlB,MACvBmB,MAAMC,QAAQF,GAAO,CAK5B,IAJA,IAAMG,EAAgB,GAChBhB,EAAMa,EAAKZ,OACbC,EAAI,EAEDA,EAAIF,EAAKE,IACZc,EAAcC,KAAKxB,EAAiBoB,EAAKX,GAAIP,IAGjD,OAAOqB,EAEP3B"}