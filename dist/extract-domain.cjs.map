{"version":3,"file":"extract-domain.cjs","sources":["../index.ts"],"sourcesContent":["function throwTypeError(): never {\n    throw new TypeError('The given URL is not a string. Please verify your string|array.');\n}\n\nconst endings = ['/', ':', '?', '#'];\nconst starters = ['.', '/', '@'];\n\ntype Url = string;\ntype Urls = string | Array<string>;\ntype ReturnUrls = Array<Url> | Array<Promise<Url>>;\ntype ReturnUrl = Url | Promise<Url | null>;\n\n/**\n * Options to extract domain.\n */\ntype GetDomainOptions = {\n    tld?: boolean;\n};\n\n/**\n * @param {Url} url\n * @param {GetDomainOptions} opts `{ tld: true }` permit to get Top Level Domain like `*.co.uk`\n * @returns {ReturnUrl} Returns a URL or a promise of a URL if the PSL lib is being used\n */\nfunction getDomainFromUrl(url: Url, opts: GetDomainOptions): ReturnUrl {\n    let domainInc: number = 0;\n    let offsetDomain: number = 0;\n    let offsetStartSlice: number = 0;\n    let offsetPath: number = 0;\n    let len: number = url.length;\n    let i: number = 0;\n\n    // Find end offset of domain\n    while (len-- && ++i) {\n        if (domainInc && endings.indexOf(url[i]) > -1) {\n            break;\n        }\n\n        if (url[i] !== '.') {\n            continue;\n        }\n\n        ++domainInc;\n\n        offsetDomain = i;\n    }\n\n    offsetPath = i;\n\n    i = offsetDomain;\n\n    // Find offset before domain name.\n    while (i--) {\n        // Look for sub domain, protocol or basic auth\n        if (starters.indexOf(url[i]) === -1) {\n            continue;\n        }\n\n        offsetStartSlice = i + 1;\n\n        break;\n    }\n\n    if (offsetStartSlice === 0 && offsetPath > 3) {\n        return url;\n    }\n\n    if (offsetStartSlice > 0 && offsetStartSlice < 2) {\n        return '';\n    }\n\n    // Very customized if statement for tlds\n    if (opts.tld) {\n        let offsetStart: number = 0;\n        const starters: Array<string> = ['/', '@'];\n        let i: number = offsetDomain;\n\n        while (i--) {\n            if (starters.indexOf(url[i]) > -1) {\n                offsetStart = i + 1;\n\n                break;\n            }\n        }\n\n        return import('psl')\n            .then((psl) => Promise.resolve(psl.get(url.slice(offsetStart, offsetPath))))\n            .catch((error) => {\n                console.error(error);\n\n                throw Error(\n                    'You must install psl library (https://www.npmjs.com/package/psl) to use `tld` option'\n                );\n            });\n    }\n\n    // Tried several approaches slicing a string. Can't get it any faster than this.\n    return url.slice(offsetStartSlice, offsetPath);\n}\n\n/**\n * @param {Urls} urls [\"https://www.google.com\", \"https://www.github.com\"] or \"https://www.google.com\"\n * @param {GetDomainOptions} opts `{ tld: true }` permit to get Top Level Domain like `*.co.uk`\n * @returns {Urls | Promise<Urls>} Return URLs or a promise of URLs if the PSL lib is being used\n */\nexport default function extractDomain(\n    urls: Urls,\n    opts: GetDomainOptions = {}\n): ReturnUrl | ReturnUrls | null {\n    if (typeof urls === 'string') {\n        return getDomainFromUrl(urls, opts);\n    } else if (Array.isArray(urls)) {\n        // lazy type checking (^o^)\n        const extractedUrls: any = [];\n        const len: number = urls.length;\n        let i: number = 0;\n\n        for (; i < len; i++) {\n            const url = getDomainFromUrl(urls[i], opts);\n\n            extractedUrls.push(url);\n        }\n\n        return extractedUrls;\n    } else {\n        throwTypeError();\n    }\n}\n"],"names":["endings","starters","getDomainFromUrl","url","opts","offsetPath","domainInc","offsetDomain","offsetStartSlice","len","length","i","indexOf","tld","offsetStart","Promise","resolve","then","_interopNamespace","require","psl","get","slice","error","console","Error","urls","Array","isArray","extractedUrls","push","TypeError","throwTypeError"],"mappings":"8QAIA,IAAMA,EAAU,CAAC,IAAK,IAAK,IAAK,KAC1BC,EAAW,CAAC,IAAK,IAAK,KAmB5B,SAASC,EAAiBC,EAAUC,GAShC,IARA,IAGIC,EAHAC,EAAoB,EACpBC,EAAuB,EACvBC,EAA2B,EAE3BC,EAAcN,EAAIO,OAClBC,EAAY,EAGTF,OAAWE,KACVL,GAAaN,EAAQY,QAAQT,EAAIQ,KAAO,IAI7B,MAAXR,EAAIQ,OAINL,EAEFC,EAAeI,GAQnB,IALAN,EAAaM,EAEbA,EAAIJ,EAGGI,KAEH,IAAkC,IAA9BV,EAASW,QAAQT,EAAIQ,IAAzB,CAIAH,EAAmBG,EAAI,EAEvB,KAJC,CAOL,GAAyB,IAArBH,GAA0BH,EAAa,EACvC,OAAOF,EAGX,GAAIK,EAAmB,GAAKA,EAAmB,EAC3C,MAAO,GAIX,GAAIJ,EAAKS,IAAK,CAKV,IAJA,IAAIC,EAAsB,EACpBb,EAA0B,CAAC,IAAK,KAClCU,EAAYJ,EAETI,KACH,GAAIV,EAASW,QAAQT,EAAIQ,KAAO,EAAG,CAC/BG,EAAcH,EAAI,EAElB,KACH,CAGL,OAAaI,QAAAC,UAAAC,KAAA,wBAAA,OAAAC,EAAAC,QAAC,OAAM,GACfF,KAAK,SAACG,UAAQL,QAAQC,QAAQI,EAAIC,IAAIlB,EAAImB,MAAMR,EAAaT,IAAa,GAAC,MACrE,SAACkB,GAGJ,MAFAC,QAAQD,MAAMA,GAERE,MACF,uFAER,EACP,CAGD,OAAOtB,EAAImB,MAAMd,EAAkBH,EACvC,gBAOwB,SACpBqB,EACAtB,GAEA,YAFAA,IAAAA,EAAyB,CAAE,GAEP,iBAATsB,EACP,OAAOxB,EAAiBwB,EAAMtB,GAC3B,GAAIuB,MAAMC,QAAQF,GAAO,CAM5B,IAJA,IAAMG,EAAqB,GACrBpB,EAAciB,EAAKhB,OACrBC,EAAY,EAETA,EAAIF,EAAKE,IAAK,CACjB,IAAMR,EAAMD,EAAiBwB,EAAKf,GAAIP,GAEtCyB,EAAcC,KAAK3B,EACtB,CAED,OAAO0B,CACV,EA5HL,WACI,MAAM,IAAIE,UAAU,kEACxB,CA2HQC,EAER"}