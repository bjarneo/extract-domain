{"version":3,"file":"extract-domain.cjs","sources":["../index.js"],"sourcesContent":["function throwTypeError() {\n    throw new TypeError('The given URL is not a string. Please verify your string|array.');\n}\n\nconst endings = ['/', ':', '?', '#'];\nconst starters = ['.', '/', '@'];\n\n/**\n * Options to extract domain.\n * @typedef {({tld: boolean})} GetDomainOptions\n */\n\n/**\n * @param {string} url\n * @param {GetDomainOptions} opts\n *  - `tld` permit to get Top Level Domain like `*.co.uk`\n * @returns {string}\n */\nfunction getDomainFromUrl(url, opts) {\n    if (typeof url !== 'string') {\n        throwTypeError();\n    }\n\n    let domainInc = 0;\n    let offsetDomain = 0;\n    let offsetStartSlice = 0;\n    let offsetPath = 0;\n    let len = url.length;\n    let i = 0;\n\n    // Find end offset of domain\n    while (len-- && ++i) {\n        if (domainInc && endings.indexOf(url[i]) > -1) {\n            break;\n        }\n\n        if (url[i] !== '.') {\n            continue;\n        }\n\n        ++domainInc;\n\n        offsetDomain = i;\n    }\n\n    offsetPath = i;\n\n    i = offsetDomain;\n\n    // Find offset before domain name.\n    while (i--) {\n        // Look for sub domain, protocol or basic auth\n        if (starters.indexOf(url[i]) === -1) {\n            continue;\n        }\n\n        offsetStartSlice = i + 1;\n\n        break;\n    }\n\n    if (offsetStartSlice === 0 && offsetPath > 3) {\n        return url;\n    }\n\n    if (offsetStartSlice > 0 && offsetStartSlice < 2) {\n        return '';\n    }\n\n    // Very customized if statement for tlds\n    if (opts.tld) {\n        let offsetStart = 0;\n        const starters = ['/', '@'];\n        let i = offsetDomain;\n\n        while (i--) {\n            if (starters.indexOf(url[i]) > -1) {\n                offsetStart = i + 1;\n\n                break;\n            }\n        }\n\n        try {\n            return import('psl')\n                .then((psl) => Promise.resolve(psl.get(url.slice(offsetStart, offsetPath))))\n                .catch(console.error);\n        } catch (error) {\n            console.error(error);\n\n            throw Error(\n                'You must install psl library (https://www.npmjs.com/package/psl) to use `tld` option'\n            );\n        }\n    }\n\n    // Tried several approaches slicing a string. Can't get it any faster than this.\n    return url.slice(offsetStartSlice, offsetPath);\n}\n\n/**\n * @param {string} url\n * @param {GetDomainOptions} opts\n *  - `tld` permit to get Top Level Domain like `*.co.uk`\n * @returns {string}\n */\nexport default function extractDomain(urls, opts = {}) {\n    if (typeof urls === 'string') {\n        return getDomainFromUrl(urls, opts);\n    } else if (Array.isArray(urls)) {\n        const extractedUrls = [];\n        const len = urls.length;\n        let i = 0;\n\n        for (; i < len; i++) {\n            extractedUrls.push(getDomainFromUrl(urls[i], opts));\n        }\n\n        return extractedUrls;\n    } else {\n        throwTypeError();\n    }\n}\n"],"names":["throwTypeError","TypeError","endings","starters","getDomainFromUrl","url","opts","offsetPath","offsetDomain","offsetStartSlice","len","length","i","domainInc","indexOf","tld","offsetStart","resolve","then","_interopNamespace","require","psl","Promise","get","slice","console","error","Error","urls","Array","isArray","extractedUrls","push"],"mappings":"8QAAA,SAASA,IACL,UAAMC,UAAc,kEACvB,CAED,IAAaC,EAAG,CAAC,IAAK,IAAK,IAAK,KAC1BC,EAAW,CAAC,IAAK,IAAK,KAa5B,SAAAC,EAA0BC,EAAKC,GACR,iBAARD,GACPL,IAWJ,IARA,IAGcO,IAHE,EACZC,EAAe,EACCC,EAAG,EAEhBC,EAAGL,EAAIM,OACVC,EAAI,EAGDF,OAAWE,KACVC,GAAaX,EAAQY,QAAQT,EAAIO,KAAO,IAI7B,MAAXP,EAAIO,OAINC,EAEFL,EAAeI,GAQnB,IALAL,EAAaK,EAEbA,EAAIJ,EAGGI,KAEH,IAAkC,IAA9BT,EAASW,QAAQT,EAAIO,IAAzB,CAIAH,EAAmBG,EAAI,EAEvB,KAJC,CAOL,GAAyB,IAArBH,GAA0BF,EAAa,EACvC,SAGJ,GAAIE,EAAmB,GAAKA,EAAmB,EAC3C,MAAO,GAIX,GAAIH,EAAKS,IAAK,CAKV,IAJA,MAAkB,EACZZ,EAAW,CAAC,IAAK,KACnBS,EAAIJ,EAEDI,KACH,GAAIT,EAASW,QAAQT,EAAIO,KAAO,EAAG,CAC/BI,EAAcJ,EAAI,EAElB,KACH,CAGL,IACI,eAAcK,UAAAC,KAAA,wBAAA,OAAAC,EAAAC,QAAA,OAAP,GACFF,KAAK,SAACG,GAAQC,OAAAA,QAAQL,QAAQI,EAAIE,IAAIlB,EAAImB,MAAMR,EAAaT,IAAxD,GADH,MAEIkB,QAAQC,MAOtB,CANC,MAAOA,GAGL,MAFAD,QAAQC,MAAMA,GAEHC,MACP,uFAEP,CACJ,CAGD,OAAUtB,EAACmB,MAAMf,EAAkBF,EACtC,gBAQc,SAAuBqB,EAAMtB,GACxC,QADmD,IAAXA,IAAAA,EAAO,CAAI,GAC/B,iBAATsB,EACP,OAAOxB,EAAiBwB,EAAMtB,GACvBuB,GAAAA,MAAMC,QAAQF,GAAO,CAK5B,IAJA,IAAmBG,EAAG,KACVH,EAAKjB,OACZC,EAAG,EAEDA,EAAIF,EAAKE,IACZmB,EAAcC,KAAK5B,EAAiBwB,EAAKhB,GAAIN,IAGjD,OAAOyB,CACV,CACG/B,GAEP"}